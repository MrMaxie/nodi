{
  "version": 3,
  "sources": ["../src/index.tsx"],
  "sourcesContent": ["import ReactDOM from 'react-dom';\r\nimport React from 'react';\r\nimport Sigma from 'sigma';\r\nimport Graph from 'graphology';\r\nimport forceAtlas2 from 'graphology-layout-forceatlas2';\r\nimport noverlap from 'graphology-layout-noverlap';\r\nimport rawData from './data_mine.json';\r\nimport { createTree } from './Tree';\r\n\r\ntype Node = {\r\n    id: string;\r\n    isModule?: boolean;\r\n    isFirst?: boolean;\r\n    type?: string;\r\n    layer?: number;\r\n    column?: number;\r\n};\r\n\r\nconst data = rawData as {\r\n    nodes: Node[];\r\n    edges: {\r\n        a: string;\r\n        b: string;\r\n    }[];\r\n};\r\n\r\nconst $elV = document.querySelector<HTMLDivElement>('#app-viewer');\r\nconst $elT = document.querySelector<HTMLDivElement>('#app-tree');\r\n\r\nconst graph = new Graph();\r\n\r\nconst getColor = (node: Node) => {\r\n    if (node.isModule) {\r\n        return '#34495E';\r\n    }\r\n\r\n    if (node.isFirst) {\r\n        return '#3EDC81';\r\n    }\r\n\r\n    if (node.type === 'class') {\r\n        return '#9B59B6';\r\n    }\r\n\r\n    if (node.type === 'var') {\r\n        return '#F9BF3B';\r\n    }\r\n\r\n    if (node.type === 'function') {\r\n        return '#22A7F0';\r\n    }\r\n\r\n    if (node.type === 'method') {\r\n        return '#d90429';\r\n    }\r\n\r\n    if (node.type === 'member') {\r\n        return '#ffd6a5';\r\n    }\r\n\r\n    if (node.type === 'interface') {\r\n        return '#006466';\r\n    }\r\n\r\n    if (node.type === 'type_alias') {\r\n        return '#80ffdb';\r\n    }\r\n\r\n    return '#95A5A6';\r\n};\r\n\r\nconst getSize = (node: Node) => {\r\n    if (node.type === 'class' || node.type === 'var' || node.type === 'function') {\r\n        return 3;\r\n    }\r\n\r\n    return 4;\r\n};\r\n\r\nconst setupLayout = () => {\r\n    const firstNode = data.nodes.find(node => node.isFirst);\r\n\r\n    if (!firstNode) {\r\n        return;\r\n    }\r\n\r\n    const columns: Record<number, number> = {};\r\n\r\n    const printNode = (id: string, minLayer: number) => {\r\n        if (graph.getNodeAttribute(id, 'column')) {\r\n            return;\r\n        }\r\n\r\n        graph.setNodeAttribute(id, 'layer', minLayer);\r\n\r\n        columns[minLayer] = (columns[minLayer] || 0) + 1;\r\n\r\n        graph.setNodeAttribute(id, 'column', columns[minLayer]);\r\n\r\n        const layers: Record<string, number> = {};\r\n\r\n        graph.forEachEdge(id, (edgeId, attrs, source, target) => {\r\n            const neighborId = source === id ? target : source;\r\n            const neighborLayer = graph.getNodeAttribute(neighborId, 'layer');\r\n\r\n            if (neighborLayer) {\r\n                return;\r\n            }\r\n\r\n            let newLayer = minLayer + 1;\r\n\r\n            while(true) {\r\n                if (graph.findEdge(neighborId, (subEdgeId, subAttrs, subSource, subTarget) => {\r\n                    const subNeighborId = subSource === neighborId ? subTarget : subSource;\r\n                    const subNeighborLayer = graph.getNodeAttribute(subNeighborId, 'layer');\r\n\r\n                    if (subNeighborLayer && subNeighborLayer === newLayer) {\r\n                        return true;\r\n                    }\r\n\r\n                    return false;\r\n                })) {\r\n                    newLayer += 1;\r\n                    continue;\r\n                }\r\n                break;\r\n            }\r\n\r\n            layers[neighborId] = newLayer;\r\n        });\r\n\r\n        for (const [neighborId, layer] of Object.entries(layers)) {\r\n            printNode(neighborId, layer);\r\n        }\r\n    };\r\n\r\n    printNode(firstNode.id, 1);\r\n\r\n    graph.forEachNode(nodeId => {\r\n        const column = graph.getNodeAttribute(nodeId, 'column');\r\n        const layer = graph.getNodeAttribute(nodeId, 'layer');\r\n\r\n        if (!column || !layer) {\r\n            graph.setNodeAttribute(nodeId, 'x', -10);\r\n            graph.setNodeAttribute(nodeId, 'y', -10);\r\n            console.log('?', column, layer, graph.getNodeAttributes(nodeId));\r\n            return;\r\n        }\r\n\r\n        graph.setNodeAttribute(nodeId, 'x', (column) + ((layer % 2) * .5));\r\n        graph.setNodeAttribute(nodeId, 'y', 0 - (layer));\r\n    });\r\n};\r\n\r\nconst atlas = () => {\r\n    forceAtlas2.assign(graph, {\r\n        iterations: 20,\r\n        weighted: false,\r\n        settings: {\r\n            gravity: 1,\r\n            barnesHutTheta: 4,\r\n            linLogMode: false,\r\n            barnesHutOptimize: true,\r\n        },\r\n    });\r\n};\r\n\r\nconst noOverlap = () => {\r\n    noverlap.assign(graph, {\r\n        settings: {\r\n            gridSize: 4,\r\n            margin: 4,\r\n            speed: 4,\r\n        },\r\n    });\r\n};\r\n\r\nsetTimeout(() => {\r\n    data.nodes.forEach(node => {\r\n        graph.addNode(node.id, {\r\n            x: Math.random() * 10,\r\n            y: Math.random() * 10,\r\n            size: getSize(node),\r\n            realLabel: node.id.replace(/\\|.*?$/, ''),\r\n            label: '',\r\n            realColor: getColor(node),\r\n            color: getColor(node),\r\n        });\r\n    });\r\n\r\n    data.edges.forEach(edge => {\r\n        graph.addEdge(edge.a, edge.b, {\r\n            type: 'arrow',\r\n        });\r\n    });\r\n\r\n    setupLayout();\r\n\r\n    atlas();\r\n    noOverlap();\r\n\r\n    setTimeout(() => {\r\n        if (!$elV || !$elT) {\r\n            return;\r\n        }\r\n\r\n        const sigma = new Sigma(graph, $elV, {\r\n            // renderLabels: false,\r\n            labelColor: {\r\n                color: '#ffffff'\r\n            },\r\n            labelFont: 'Roboto Mono',\r\n            defaultEdgeType: 'arrow',\r\n            zIndex: true,\r\n            defaultEdgeColor: '#232323',\r\n        });\r\n\r\n        let lastNodeId = '';\r\n\r\n        sigma.on('clickNode', e => {\r\n            const nodeId = e.node;\r\n            if (lastNodeId === nodeId) {\r\n                lastNodeId = null;\r\n                graph.forEachEdge((edgeId, attrs, sourceId, targetId) => {\r\n                    graph.setEdgeAttribute(edgeId, 'color', '#232323');\r\n                });\r\n                graph.forEachNode(subNodeId => {\r\n                    graph.setNodeAttribute(subNodeId, 'label', '');\r\n                    graph.setNodeAttribute(subNodeId, 'color', graph.getNodeAttribute(subNodeId, 'realColor') || '');\r\n                });\r\n            } else {\r\n                lastNodeId = nodeId;\r\n                graph.forEachNode(subNodeId => {\r\n                    graph.setNodeAttribute(subNodeId, 'label', '');\r\n                    graph.setNodeAttribute(subNodeId, 'color', 'rgba(30, 30, 30, .1)');\r\n                });\r\n                graph.forEachEdge((edgeId, attrs, sourceId, targetId) => {\r\n                    if (nodeId === sourceId || nodeId === targetId) {\r\n                        graph.setEdgeAttribute(edgeId, 'color', '#232323');\r\n                        graph.setNodeAttribute(sourceId, 'label', graph.getNodeAttribute(sourceId, 'realLabel') || '');\r\n                        graph.setNodeAttribute(targetId, 'label', graph.getNodeAttribute(targetId, 'realLabel') || '');\r\n                        graph.setNodeAttribute(sourceId, 'color', graph.getNodeAttribute(sourceId, 'realColor') || '');\r\n                        graph.setNodeAttribute(targetId, 'color', graph.getNodeAttribute(targetId, 'realColor') || '');\r\n                    } else {\r\n                        graph.setEdgeAttribute(edgeId, 'color', 'rgba(0, 0, 0, 0)');\r\n                    }\r\n\r\n                });\r\n            }\r\n            sigma.refresh();\r\n        });\r\n\r\n        const A = React.lazy(() => import('./A').then(m => ({ default: m.A })));\r\n\r\n        const Tree = createTree(data, sigma);\r\n        ReactDOM.render(<><Tree /><A /></>, $elT);\r\n    });\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
