"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.x2 = exports.arePolishNames = exports.canAllDivByFive = void 0;
const Nyx = {
    test: (c) => {
        const opts = {
            prepare: (obj) => { },
            setup: () => new c(),
        };
        const setter = {
            prepare: (fn) => {
                opts.prepare = fn;
                return setter;
            },
            setup: (fn) => {
                opts.setup = fn;
                return setter;
            },
            run: () => {
                const i = opts.setup();
                for (const m of Object.keys(i)) {
                    opts.prepare(i);
                    console.log(m);
                    if (typeof i[m] === 'function') {
                        i[m]();
                    }
                }
            },
        };
        return setter;
    },
};
class BTest {
    no = 0;
    lol() {
        console.log('lol');
    }
    lolz = () => {
        console.log('wtf?');
    };
}
Nyx.test(BTest)
    .setup(() => {
    return new BTest();
})
    .prepare(i => {
    i.no += 1;
})
    .run();
const canAllDivByFive = (nums) => nums.every(n => {
    if (n === 0) {
        throw new TypeError('Cannot test 0');
    }
    return n % 5 === 0;
});
exports.canAllDivByFive = canAllDivByFive;
const polishNames = /^maciek|karol$/i;
const arePolishNames = (names) => names.every(name => polishNames.test(name));
exports.arePolishNames = arePolishNames;
const x2 = (nums) => nums.map(x => x * 2);
exports.x2 = x2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBS0EsTUFBTSxHQUFHLEdBQUc7SUFDUixJQUFJLEVBQUUsQ0FBa0IsQ0FBSSxFQUFFLEVBQUU7UUFDNUIsTUFBTSxJQUFJLEdBQUc7WUFDVCxPQUFPLEVBQUUsQ0FBQyxHQUFvQixFQUFFLEVBQUUsR0FBRSxDQUFDO1lBQ3JDLEtBQUssRUFBRSxHQUFvQixFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7U0FDeEMsQ0FBQztRQUVGLE1BQU0sTUFBTSxHQUFHO1lBQ1gsT0FBTyxFQUFFLENBQUMsRUFBMEIsRUFBRSxFQUFFO2dCQUNwQyxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztnQkFDbEIsT0FBTyxNQUFNLENBQUM7WUFDbEIsQ0FBQztZQUNELEtBQUssRUFBRSxDQUFDLEVBQXdCLEVBQUUsRUFBRTtnQkFDaEMsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7Z0JBQ2hCLE9BQU8sTUFBTSxDQUFDO1lBQ2xCLENBQUM7WUFDRCxHQUFHLEVBQUUsR0FBRyxFQUFFO2dCQUNOLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFFdkIsS0FBSyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUM1QixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUVoQixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUVmLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssVUFBVSxFQUFFO3dCQUM1QixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztxQkFDVjtpQkFDSjtZQUNMLENBQUM7U0FDSixDQUFDO1FBRUYsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztDQUNKLENBQUM7QUFFRixNQUFNLEtBQUs7SUFDUCxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRVAsR0FBRztRQUNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQUksR0FBRyxHQUFHLEVBQUU7UUFDUixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hCLENBQUMsQ0FBQztDQUNMO0FBRUQsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7S0FDVixLQUFLLENBQUMsR0FBRyxFQUFFO0lBQ1IsT0FBTyxJQUFJLEtBQUssRUFBRSxDQUFDO0FBQ3ZCLENBQUMsQ0FBQztLQUNELE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUNULENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2QsQ0FBQyxDQUFDO0tBQ0QsR0FBRyxFQUFFLENBQUM7QUFXSixNQUFNLGVBQWUsR0FBRyxDQUFDLElBQWMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUM5RCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDVCxNQUFNLElBQUksU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0tBQ3hDO0lBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN2QixDQUFDLENBQUMsQ0FBQztBQU5VLFFBQUEsZUFBZSxtQkFNekI7QUFFSCxNQUFNLFdBQVcsR0FBRyxpQkFBaUIsQ0FBQztBQUUvQixNQUFNLGNBQWMsR0FBRyxDQUFDLEtBQWUsRUFBRSxFQUFFLENBQzlDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFEbkMsUUFBQSxjQUFjLGtCQUNxQjtBQUV6QyxNQUFNLEVBQUUsR0FBRyxDQUFDLElBQWMsRUFBRSxFQUFFLENBQ2pDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFEWixRQUFBLEVBQUUsTUFDVSIsInNvdXJjZXNDb250ZW50IjpbIlxyXG50eXBlIENsYXNzID0ge1xyXG4gICAgbmV3KC4uLmFyZ3M6IGFueVtdKTogYW55O1xyXG59O1xyXG5cclxuY29uc3QgTnl4ID0ge1xyXG4gICAgdGVzdDogPEMgZXh0ZW5kcyBDbGFzcz4oYzogQykgPT4ge1xyXG4gICAgICAgIGNvbnN0IG9wdHMgPSB7XHJcbiAgICAgICAgICAgIHByZXBhcmU6IChvYmo6IEluc3RhbmNlVHlwZTxDPikgPT4ge30sXHJcbiAgICAgICAgICAgIHNldHVwOiAoKTogSW5zdGFuY2VUeXBlPEM+ID0+IG5ldyBjKCksXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3Qgc2V0dGVyID0ge1xyXG4gICAgICAgICAgICBwcmVwYXJlOiAoZm46IHR5cGVvZiBvcHRzWydwcmVwYXJlJ10pID0+IHtcclxuICAgICAgICAgICAgICAgIG9wdHMucHJlcGFyZSA9IGZuO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldHRlcjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0dXA6IChmbjogdHlwZW9mIG9wdHNbJ3NldHVwJ10pID0+IHtcclxuICAgICAgICAgICAgICAgIG9wdHMuc2V0dXAgPSBmbjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZXR0ZXI7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJ1bjogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IG9wdHMuc2V0dXAoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG0gb2YgT2JqZWN0LmtleXMoaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHRzLnByZXBhcmUoaSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGlbbV0gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaVttXSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gc2V0dGVyO1xyXG4gICAgfSxcclxufTtcclxuXHJcbmNsYXNzIEJUZXN0IHtcclxuICAgIG5vID0gMDtcclxuXHJcbiAgICBsb2woKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2xvbCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGxvbHogPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3d0Zj8nKTtcclxuICAgIH07XHJcbn1cclxuXHJcbk55eC50ZXN0KEJUZXN0KVxyXG4gICAgLnNldHVwKCgpID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IEJUZXN0KCk7XHJcbiAgICB9KVxyXG4gICAgLnByZXBhcmUoaSA9PiB7XHJcbiAgICAgICAgaS5ubyArPSAxO1xyXG4gICAgfSlcclxuICAgIC5ydW4oKTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBjYW5BbGxEaXZCeUZpdmUgPSAobnVtczogbnVtYmVyW10pID0+IG51bXMuZXZlcnkobiA9PiB7XHJcbiAgICBpZiAobiA9PT0gMCkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCB0ZXN0IDAnKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbiAlIDUgPT09IDA7XHJcbn0pO1xyXG5cclxuY29uc3QgcG9saXNoTmFtZXMgPSAvXm1hY2lla3xrYXJvbCQvaTtcclxuXHJcbmV4cG9ydCBjb25zdCBhcmVQb2xpc2hOYW1lcyA9IChuYW1lczogc3RyaW5nW10pID0+XHJcbiAgICBuYW1lcy5ldmVyeShuYW1lID0+IHBvbGlzaE5hbWVzLnRlc3QobmFtZSkpO1xyXG5cclxuZXhwb3J0IGNvbnN0IHgyID0gKG51bXM6IG51bWJlcltdKSA9PlxyXG4gICAgbnVtcy5tYXAoeCA9PiB4ICogMik7Il19