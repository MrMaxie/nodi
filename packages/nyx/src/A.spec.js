"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Nyx_1 = require("./Nyx");
const A_1 = require("./A");
const core_1 = require("@nodi/core");
const { it } = (0, Nyx_1.setup)(() => ({
    debug: A_1.debug,
}));
(0, Nyx_1.scope)('debug', () => {
    it('should be done', ctx => {
        const defer = new core_1.Deferred();
        ctx.debug.orDo(() => {
            defer.resolve();
        });
        setTimeout(() => {
            defer.reject();
        });
        return defer.promise;
    });
    it('should be true', ctx => {
        ctx.debug.isEnabled = true;
        (0, Nyx_1.assert)(() => ctx.debug.isEnabled !== true, f => f `Value ${'debug.isEnabled'} have to not be ${true} but is ${ctx.debug.isEnabled}`);
    });
});
Nyx_1.nyx.run('should be true');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQS5zcGVjLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLCtCQUFrRDtBQUNsRCwyQkFBNEI7QUFDNUIscUNBQXNDO0FBRXRDLE1BQU0sRUFBRSxFQUFFLEVBQUUsR0FBRyxJQUFBLFdBQUssRUFBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3hCLEtBQUssRUFBTCxTQUFLO0NBQ1IsQ0FBQyxDQUFDLENBQUM7QUFFSixJQUFBLFdBQUssRUFBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO0lBQ2hCLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsRUFBRTtRQUN2QixNQUFNLEtBQUssR0FBRyxJQUFJLGVBQVEsRUFBRSxDQUFDO1FBRTdCLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNoQixLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7UUFFSCxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ1osS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDO0lBQ3pCLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxFQUFFO1FBQ3ZCLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUUzQixJQUFBLFlBQU0sRUFDRixHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsS0FBSyxJQUFJLEVBQ2xDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBLFNBQVMsaUJBQWlCLG1CQUFtQixJQUFJLFdBQVcsR0FBRyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FDMUYsQ0FBQztJQUNOLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUM7QUFFSCxTQUFHLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaW1wb3J0IHsgYXNzZXJ0LCBzY29wZSwgc2V0dXAsIG55eCB9IGZyb20gJy4vTnl4JztcclxuaW1wb3J0IHsgZGVidWcgfSBmcm9tICcuL0EnO1xyXG5pbXBvcnQgeyBEZWZlcnJlZCB9IGZyb20gJ0Bub2RpL2NvcmUnO1xyXG5cclxuY29uc3QgeyBpdCB9ID0gc2V0dXAoKCkgPT4gKHtcclxuICAgIGRlYnVnLFxyXG59KSk7XHJcblxyXG5zY29wZSgnZGVidWcnLCAoKSA9PiB7XHJcbiAgICBpdCgnc2hvdWxkIGJlIGRvbmUnLCBjdHggPT4ge1xyXG4gICAgICAgIGNvbnN0IGRlZmVyID0gbmV3IERlZmVycmVkKCk7XHJcblxyXG4gICAgICAgIGN0eC5kZWJ1Zy5vckRvKCgpID0+IHtcclxuICAgICAgICAgICAgZGVmZXIucmVzb2x2ZSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgZGVmZXIucmVqZWN0KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBkZWZlci5wcm9taXNlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBiZSB0cnVlJywgY3R4ID0+IHtcclxuICAgICAgICBjdHguZGVidWcuaXNFbmFibGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgYXNzZXJ0KFxyXG4gICAgICAgICAgICAoKSA9PiBjdHguZGVidWcuaXNFbmFibGVkICE9PSB0cnVlXHJcbiAgICAgICAgICAgIGYgPT4gZmBWYWx1ZSAkeydkZWJ1Zy5pc0VuYWJsZWQnfSBoYXZlIHRvIG5vdCBiZSAke3RydWV9IGJ1dCBpcyAke2N0eC5kZWJ1Zy5pc0VuYWJsZWR9YFxyXG4gICAgICAgICk7XHJcbiAgICB9KTtcclxufSk7XHJcblxyXG5ueXgucnVuKCdzaG91bGQgYmUgdHJ1ZScpO1xyXG4iXX0=